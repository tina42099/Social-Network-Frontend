//-https://github.com/sahat/hackathon-starter/blob/master/views/api/google-maps.pug

extends template

block content

  head
    meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
    meta(charset='utf-8')
    title Places Searchbox
    style.
      /* Always set the map height explicitly to define the size of the div
      * element that contains the map. */
      #map {
      height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
      height: 100%;
      margin: 0;
      padding: 0;
      }
      #description {
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      }
      #infowindow-content .title {
      font-weight: bold;
      }
      #infowindow-content {
      display: none;
      }
      #map #infowindow-content {
      display: inline;
      }
      .pac-card {
      margin: 10px 10px 0 0;
      border-radius: 2px 0 0 2px;
      box-sizing: border-box;
      -moz-box-sizing: border-box;
      outline: none;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      background-color: #fff;
      font-family: Roboto;
      }
      #pac-container {
      padding-bottom: 12px;
      margin-right: 12px;
      }
      .pac-controls {
      display: inline-block;
      padding: 5px 11px;
      }
      .pac-controls label {
      font-family: Roboto;
      font-size: 13px;
      font-weight: 300;
      }
      #pac-input {
      background-color: #fff;
      font-family: Roboto;
      font-size: 15px;
      font-weight: 300;
      padding: 0 11px 0 13px;
      margin-left: 30%;
      text-overflow: ellipsis;
      width: 20%;
      }
      #pac-input:focus {
      border-color: #4d90fe;
      }
      #title {
      color: #fff;
      background-color: #4d90fe;
      font-size: 25px;
      font-weight: 500;
      padding: 6px 12px;
      }
      #target {
      width: 345px;
      }
  body
    input#pac-input.controls(type='text', placeholder='Search Box')
    #map
    script.
      var map, infoWindow, startMarker;
      function initAutocomplete() {
      map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 37.0902, lng: -95.7129},
      zoom: 5,
      mapTypeId: 'roadmap'
      });

      infoWindow = new google.maps.InfoWindow;

      // Try HTML5 geolocation.
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };

          startMarker = new google.maps.Marker({
          map: map,
          position: pos,
          title: 'You are Here'
          });

          infoWindow.setPosition(pos);
          infoWindow.setContent('You are here');
          infoWindow.open(map);
          map.setCenter(pos);
          map.setZoom(18)
        }, function() {
          handleLocationError(true, infoWindow, map.getCenter());
        });
      } else {
          // Browser doesn't support Geolocation
        handleLocationError(false, infoWindow, map.getCenter());
      }

      // Create the search box and link it to the UI element.
      var input = document.getElementById('pac-input');
      var searchBox = new google.maps.places.SearchBox(input);
      map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);
      // Bias the SearchBox results towards current map's viewport.
      map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
      });
      var markers = [];
      // Listen for the event fired when the user selects a prediction and retrieve
      // more details for that place.
      searchBox.addListener('places_changed', function() {
      var places = searchBox.getPlaces();
      if (places.length == 0) {
      return;
      }
      // Clear out the old markers.
      markers.forEach(function(marker) {
      marker.setMap(null);
      });
      markers = [];
      // For each place, get the icon, name and location.
      var bounds = new google.maps.LatLngBounds();
      places.forEach(function(place) {
      if (!place.geometry) {
      console.log("Returned place contains no geometry");
      return;
      }
      var icon = {
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(25, 25)
      };
      // Create a marker for each place.
      markers.push(new google.maps.Marker({
      map: map,
      icon: icon,
      title: place.name,
      position: place.geometry.location
      }));
      if (place.geometry.viewport) {
      // Only geocodes have viewport.
      bounds.union(place.geometry.viewport);
      } else {
      bounds.extend(place.geometry.location);
      }
      });
      map.fitBounds(bounds);
      });
      }

      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
                            'Error: The Geolocation service failed.' :
                            'Error: Your browser doesn\'t support geolocation.');
      infoWindow.open(map);
      } 

    script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyDnLW1czivMAJWi5LxMmX4LlO3XYzql9aU&libraries=places&callback=initAutocomplete', async='', defer='')


